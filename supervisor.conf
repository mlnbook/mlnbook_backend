; Sample supervisor config file.
;
; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;
; Note: shell expansion ("~" or "$HOME") is not supported. Environment
; variables can be expanded using this syntax: "%(ENV_HOME)s".

[unix_http_server]
file=/tmp/supervisor.sock ; (the path to the socket file)

[supervisord]
logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10 ; (num of main logfile rotation backups;default 10)
loglevel=info ; (log level;default info; others: debug,warn,trace)
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false ; (start in foreground if true;default false)
minfds=1024 ; (min. avail startup file descriptors;default 1024)
minprocs=200 ; (min. avail process descriptors;default 200)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket


[program:mlnbook_backend]
command=/admin/dev_mlnbook/mlnbook_backend/venv/bin/gunicorn -w 4 -b 0.0.0.0:8080 -t 300 --worker-class gevent config.wsgi:application  ; supervisor启动命令
directory=/admin/dev_mlnbook/mlnbook_backend/            ; 项目的文件夹路径
startsecs=5                                                              ; 启动时间
stopwaitsecs=60                                                            ; 终止等待时间
autostart=true                                                           ; 是否自动启动
autorestart=true                                                         ; 是否自动重启
stdout_logfile=/admin/dev_mlnbook/mlnbook_backend/logs/gunicorn_access.log             ; log 日志
stderr_logfile=/admin/dev_mlnbook/mlnbook_backend/logs/gunicorn_error.log             ; 错误日志
user = admin


[program:celery_worker]
command=/admin/dev_mlnbook/mlnbook_backend/venv/bin/celery -A config.celery_app worker -l info
directory=/admin/dev_mlnbook/mlnbook_backend/
user=admin
numprocs=1
stdout_logfile=/admin/dev_mlnbook/mlnbook_backend/logs/celery_access.log
stderr_logfile=/admin/dev_mlnbook/mlnbook_backend/logs/celery_error.log
autostart=true
autorestart=true
startsecs=5
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
; Causes supervisor to send the termination signal (SIGTERM) to the whole process group.
stopasgroup=true
; Set Celery priority higher than default (999)
; so, if rabbitmq is supervised, it will start first.
priority=1000

[program:celery_schedulers]
command=/admin/dev_mlnbook/mlnbook_backend/venv/bin/celery -A config.celery_app beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
directory=/admin/dev_mlnbook/mlnbook_backend/
user=admin
numprocs=1
stdout_logfile=/admin/dev_mlnbook/mlnbook_backend/logs/celery_access.log
stderr_logfile=/admin/dev_mlnbook/mlnbook_backend/logs/celery_error.log
autostart=true
autorestart=true
startsecs=5
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
; Causes supervisor to send the termination signal (SIGTERM) to the whole process group.
stopasgroup=true
; Set Celery priority higher than default (999)
; so, if rabbitmq is supervised, it will start first.
priority=1000
